"""
Loyd's Fifteen puzzle - solver and visualizer
Note that solved configuration has the blank (zero) tile in upper left
Use the arrows key to swap this tile with its neighbors
"""

import poc_fifteen_gui

class Puzzle:
    """
    Class representation for the Fifteen puzzle
    """

    def __init__(self, puzzle_height, puzzle_width, initial_grid=None):
        """
        Initialize puzzle with default height and width
        Returns a Puzzle object
        """
        self._height = puzzle_height
        self._width = puzzle_width
        self._grid = [[col + puzzle_width * row
                       for col in range(self._width)]
                      for row in range(self._height)]

        if initial_grid != None:
            for row in range(puzzle_height):
                for col in range(puzzle_width):
                    self._grid[row][col] = initial_grid[row][col]

    def __str__(self):
        """
        Generate string representaion for puzzle
        Returns a string
        """
        ans = ""
        for row in range(self._height):
            ans += str(self._grid[row])
            ans += "\n"
        return ans

    #####################################
    # GUI methods

    def get_height(self):
        """
        Getter for puzzle height
        Returns an integer
        """
        return self._height

    def get_width(self):
        """
        Getter for puzzle width
        Returns an integer
        """
        return self._width

    def get_number(self, row, col):
        """
        Getter for the number at tile position pos
        Returns an integer
        """
        return self._grid[row][col]

    def set_number(self, row, col, value):
        """
        Setter for the number at tile position pos
        """
        self._grid[row][col] = value

    def clone(self):
        """
        Make a copy of the puzzle to update during solving
        Returns a Puzzle object
        """
        new_puzzle = Puzzle(self._height, self._width, self._grid)
        return new_puzzle

    ########################################################
    # Core puzzle methods

    def current_position(self, solved_row, solved_col):
        """
        Locate the current position of the tile that will be at
        position (solved_row, solved_col) when the puzzle is solved
        Returns a tuple of two integers        
        """
        solved_value = (solved_col + self._width * solved_row)

        for row in range(self._height):
            for col in range(self._width):
                if self._grid[row][col] == solved_value:
                    return (row, col)
        assert False, "Value " + str(solved_value) + " not found"

    def update_puzzle(self, move_string):
        """
        Updates the puzzle state based on the provided move string
        """
        zero_row, zero_col = self.current_position(0, 0)
        for direction in move_string:
            if direction == "l":
                assert zero_col > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col - 1]
                self._grid[zero_row][zero_col - 1] = 0
                zero_col -= 1
            elif direction == "r":
                assert zero_col < self._width - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col + 1]
                self._grid[zero_row][zero_col + 1] = 0
                zero_col += 1
            elif direction == "u":
                assert zero_row > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row - 1][zero_col]
                self._grid[zero_row - 1][zero_col] = 0
                zero_row -= 1
            elif direction == "d":
                assert zero_row < self._height - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row + 1][zero_col]
                self._grid[zero_row + 1][zero_col] = 0
                zero_row += 1
            else:
                assert False, "invalid direction: " + direction

    ##################################################################
    # Phase one methods

    def lower_row_invariant(self, target_row, target_col):
        """
        Check whether the puzzle satisfies the specified invariant
        at the given position in the bottom rows of the puzzle (target_row > 1)
        Returns a boolean
        """
        invariant = True
        if self.get_number(target_row, target_col) != 0:
            invariant = False
        height = self.get_height()
        width = self.get_width()
        matching_value = (height * width) - 1
        #loop through (i + 1) rows
        for row_idx in xrange(height - 1, target_row, -1):
            for col_idx in xrange(width - 1, -1, -1):
                if self.get_number(row_idx, col_idx) != matching_value:
                    invariant = False
                matching_value -= 1
        #loop through row i
        for idx in xrange(width - 1, target_col, -1):
            if self.get_number(target_row, idx) != matching_value:
                invariant = False
            matching_value -= 1
            
        return invariant

    def solve_interior_tile(self, target_row, target_col):
        """
        Place correct tile at target position
        Updates puzzle and returns a move string
        """
        move_string = ""
        zero_row, zero_col = self.current_position(0,0)
        moved_row, moved_col = self.current_position(target_row, target_col)
        row_diff = zero_row - moved_row
        col_diff = zero_col - moved_col
        if zero_row != moved_row:
            move_string += row_diff * 'u'
            if col_diff == 0:
                move_string += ("ld" + self._cycle_down(row_diff - 1))
            else:
                if col_diff > 0:
                    move_string += col_diff * 'l'
                    while (col_diff - 1) != 0:
                        #cycle right
                        move_string += self._cycle_right(moved_row)
                        col_diff -= 1
                else:
                    col_diff *= -1
                    move_string += (col_diff - 1) * 'r'
                    while col_diff != 0:
                        #cycle left
                        move_string += self._cycle_left(moved_row)
                        col_diff -= 1
                move_string += self._cycle_down(row_diff)
        else:
            move_string += col_diff * 'l'
            while (col_diff - 1) != 0:
                move_string += "urrdl"
                col_diff -= 1
        self.update_puzzle(move_string)
        return move_string
    
    def _cycle_right(self, target_tile_row):
        """
        Takes the target tile and cycles it right one slot
        Moves differently depending on target_tile_row
        """
        if target_tile_row == 0:
            return "drrul"
        else:
            return "urrdl"
    
    def _cycle_left(self, target_tile_row):
        """
        Cycles the target tile left
        Takes the row of where the target tile is currently at
        Moves differently depending on what row it is in
        """
        if target_tile_row == 0:
            return "rdllu"
        else:
            return "rulld"
        
    def _cycle_down(self, row_difference):
        """
        Helper method for solve_interior_tile that assumes
        the 0 tile has been moved so that it is to the left
        of the target tile
        Cycles down in a counterclockwise direction until
        the target tile is in its right spot
        """
        row_diff = row_difference
        move_string = ""
        while row_diff > 0:
            move_string += "druld"
            row_diff -= 1
        return move_string
    
    def solve_col0_tile(self, target_row):
        """
        Solve tile in column zero on specified row (> 1)
        Updates puzzle and returns a move string
        """
        move_string = ""
        zero_row = self.current_position(0,0)[0]
        moved_row, moved_col = self.current_position(target_row, 0)
        row_diff = zero_row - moved_row
        col_diff = moved_col
        move_string += row_diff * 'u'
        if col_diff == 0:
            if row_diff == 1:
                move_string += (self.get_width() - 1) * 'r'
                self.update_puzzle(move_string)
                return move_string
            else:
                move_string += ("rdl" + self._cycle_down(row_diff - 2))
        else:
            col_diff -= 1
            move_string += (col_diff) * 'r'
            while col_diff != 0:
                move_string += self._cycle_left(moved_row)
                col_diff -= 1
            move_string += self._cycle_down(row_diff - 1)
        move_string += ("ruldrdlurdluurddlur" + (self.get_width() - 2) * 'r')
        self.update_puzzle(move_string)
        return move_string
    

    #############################################################
    # Phase two methods

    def row0_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row zero invariant
        at the given column (col > 1)
        Returns a boolean
        """
        invariant = True
        if self.get_number(0, target_col) != 0:
            invariant = False
        row_one, col_j = self.current_position(1, target_col)
        if row_one != 1 and col_j != target_col:
            invariant = False
        height = self.get_height()
        width = self.get_width()
        matching_value = (height * width) - 1
        for row_idx in xrange(height - 1, 1, -1):
            for col_idx in xrange(width - 1, -1, -1):
                if self.get_number(row_idx, col_idx) != matching_value:
                    invariant = False
                matching_value -= 1
        for idx in xrange(width - 1, target_col, -1):
            if self.get_number(1, idx) != matching_value:
                invariant = False
            matching_value -= 1
        matching_value = width - 1
        for idx in xrange(width - 1, target_col, -1):
            if self.get_number(0, idx) != matching_value:
                invariant = False
            matching_value -= 1
            
        return invariant

    def row1_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row one invariant
        at the given column (col > 1)
        Returns a boolean
        """
        invariant = True
        if self.get_number(1, target_col) != 0:
            invariant = False
        height = self.get_height()
        width = self.get_width()
        matching_value = (height * width) - 1
        for row_idx in xrange(height - 1, 1, -1):
            for col_idx in xrange(width - 1, -1, -1):
                if self.get_number(row_idx, col_idx) != matching_value:
                    invariant = False
                matching_value -= 1
        for idx in xrange(width - 1, target_col, -1):
            if self.get_number(1, idx) != matching_value:
                invariant = False
            matching_value -= 1
        matching_value = width - 1
        for idx in xrange(width - 1, target_col, -1):
            if self.get_number(0, idx) != matching_value:
                invariant = False
            matching_value -= 1 
                
        return invariant

    def solve_row0_tile(self, target_col):
        """
        Solve the tile in row zero at the specified column
        Updates puzzle and returns a move string
        """
        move_string = ""
        zero_col = self.current_position(0,0)[1]
        moved_row, moved_col = self.current_position(0, target_col)
        col_diff = zero_col - moved_col
        if moved_row == 0:
            if moved_col == (target_col - 1):
                move_string += "ld"
            else:
                move_string += (col_diff * 'l' + "druld")
                col_diff -= 2
                while col_diff > 0:
                    move_string += self._cycle_right(moved_row + 1)
                    col_diff -= 1
                move_string += "urdlurrdluldrruld"
        else:
            if moved_col == (target_col - 1):
                move_string += "lldurdlurrdluldrruld"
            else:
                move_string += ("ld" + (col_diff - 1) * 'l')
                col_diff -= 2
                while col_diff > 0:
                    move_string += self._cycle_right(moved_row)
                    col_diff -= 1
                move_string += "urdlurrdluldrruld"
        self.update_puzzle(move_string)
        return move_string

    def solve_row1_tile(self, target_col):
        """
        Solve the tile in row one at the specified column
        Updates puzzle and returns a move string
        """
        move_string = ""
        clone = self.clone()
        zero_row = self.current_position(0,0)[0]
        row_diff = zero_row - 1
        if row_diff >= 0:
            move_string = clone.solve_interior_tile(zero_row, target_col) + "ur"
        else:
            move_string += "ld"
            clone.update_puzzle("ld")
            move_string += (clone.solve_interior_tile(zero_row, target_col) + "ur")
        self.update_puzzle(move_string)
        return (move_string)

    ###########################################################
    # Phase 3 methods

    def solve_2x2(self):
        """
        Solve the upper left 2x2 part of the puzzle
        Updates the puzzle and returns a move string
        """
        zero_row, zero_col = self.current_position(0,0)
        move_string = ""
        while zero_col > 0:
            move_string += 'l'
            zero_col -= 1
        while zero_row > 0:
            move_string += 'u'
            zero_row -= 1
        
        clone = self.clone()
        clone.update_puzzle(move_string)
        adj_tile = self.get_number(0,1)
        if adj_tile != 1:
            one_tile_row, one_tile_col = clone.current_position(1,1)
            one_one_tile = clone.get_number(one_tile_row, one_tile_col)
            if adj_tile == one_one_tile:
                move_string += 2 * "rdlu"
            else:
                move_string += "rdlu"
        self.update_puzzle(move_string)
        return move_string

    def solve_puzzle(self):
        """
        Generate a solution string for a puzzle
        Updates the puzzle and returns a move string
        """
        move_string = ""
        clone = self.clone()
        zero_row, zero_col = clone.current_position(0,0)
        zero_position_string = ((self.get_width() - 1 - zero_col) * 'r' + (self.get_height() - 1 - zero_row) * 'd')
        move_string += zero_position_string
        clone.update_puzzle(zero_position_string)
        
        for row_idx in xrange(self.get_height() - 1, 1, -1):
            for col_idx in xrange(self.get_width() - 1, 0, -1):
                assert clone.lower_row_invariant(row_idx, col_idx), "invariant doesn't hold"
                move_string += clone.solve_interior_tile(row_idx, col_idx)
            assert clone.lower_row_invariant(row_idx, 0), "invariant doesn't hold"
            move_string += clone.solve_col0_tile(row_idx)
        
        for col_idx in xrange(self.get_width() - 1, 1, -1):
            assert clone.row1_invariant(col_idx), "invariant doesn't hold"
            move_string += clone.solve_row1_tile(col_idx)
            assert clone.row0_invariant(col_idx), "invariant doesn't' hold"
            move_string += clone.solve_row0_tile(col_idx)
        
        move_string += clone.solve_2x2()
        move_string = _optimized_solution(move_string)
        self.update_puzzle(move_string)
        return move_string
    
def _optimized_solution(move_str):
    prev_len = len(move_str) + 1
    while len(move_str) < prev_len:
        prev_len = len(move_str)
        move_str = move_str.replace("lr", "").replace("rl", "").replace("ud", "").replace("du", "")
    return move_str
    
# Start interactive simulation
poc_fifteen_gui.FifteenGUI(Puzzle(4,4))